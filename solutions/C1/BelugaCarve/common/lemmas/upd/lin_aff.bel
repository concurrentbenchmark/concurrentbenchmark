%======================================================%
% Corollaries of look-up properties
% (linear / affine systems)
%======================================================%

% Lookup-inequality properties:
% (1) If (x :¹ A) ∈ₙ Δ and (y :⁰ B) ∈ₘ Δ, then n ≠ m
% (2) If (x :⁰ A) ∈ₙ Δ and (y :¹ B) ∈ₘ Δ, then n ≠ m [corollary of (1) using commutativity of ≠]

rec lookup_lab_neq : (Ψ:ctx) (Δ:[Ψ ⊢ lctx N[]]) [Ψ ⊢ upd Δ n[] X X' A A' 𝟙 α' Δ'] → [Ψ ⊢ upd Δ m[] Y Y' B B' 𝟘 β' Δ''] → [ ⊢ neq n m] =
  / total /
  fn u1, u2 ⇒
  let [_ ⊢ _]:[_ ⊢ upd _ n[] _ _ _ _ _ _ _] = u1 in
  let [_ ⊢ _]:[_ ⊢ upd _ m[] _ _ _ _ _ _ _] = u2 in
  case comp_nats [ ⊢ n] [ ⊢ m] of
  | [ ⊢ comp_names/eq] ⇒ impossible lookup_unq u1 u2
  | [ ⊢ comp_names/neq NEQ] ⇒ [ ⊢ NEQ]
  ;

rec lookup_lab_neq_2 : (Ψ:ctx) (Δ:[Ψ ⊢ lctx N[]]) [Ψ ⊢ upd Δ n[] X X' A A' 𝟘 α' Δ'] → [Ψ ⊢ upd Δ m[] Y Y' B B' 𝟙 β' Δ''] → [ ⊢ neq n m] =
  / total /
  fn u1, u2 ⇒ neq_comm (lookup_lab_neq u2 u1)
  ;