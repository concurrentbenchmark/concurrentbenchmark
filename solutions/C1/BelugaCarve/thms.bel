%======================================================%
% Theorems
%======================================================%

%------------------------------------------------------%
% Subject reduction
%------------------------------------------------------%

rec tp_pres : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ P ‚áõ Q] ‚Üí [Œ® ‚ä¢ oft Œî P] ‚Üí [Œ® ‚ä¢ oft Œî Q] =
  / total 1 /
  fn r, d ‚áí case r of
  | [_ ‚ä¢ ‚áõclose] ‚áí
    let [_ ‚ä¢ oft/res _ \x.\y.oft/par (oft/wait (upd/n U1) D1) (oft/close U2 D2) (mg/c (mg/c M T1[]) T2[])] = d in
    let Prune-Merge [_,x:obj ‚ä¢ M1'] [_,x:obj,y:obj ‚ä¢ _] = prune_merge [_,x:obj,y:obj ‚ä¢ M] in
    let Prune-Merge [_ ‚ä¢ M1] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1'] in
    let [_,x:obj,y:obj ‚ä¢ upd-istop _] = upd_var_istop [_,x:obj,y:obj ‚ä¢ U1[..,y,x]] in
    let [_,x:obj,y:obj ‚ä¢ upd-istop _] = upd_var_istop [_,x:obj,y:obj ‚ä¢ U2] in
    let [ ‚ä¢ ‚Ä¢/10] = [ ‚ä¢ T1] in
    let [ ‚ä¢ ‚Ä¢/01] = [ ‚ä¢ T2] in
    let Str-Top [_,x:obj ‚ä¢ D1''] [_,x:obj,y:obj ‚ä¢ _] = oft_str [_,x:obj,y:obj ‚ä¢ D1] in
    let Str-Top [_,x:obj ‚ä¢ D2''] [_,x:obj,y:obj ‚ä¢ _] = oft_str [_,x:obj,y:obj ‚ä¢ D2] in
    let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1''] in
    let Str-Top [_ ‚ä¢ D2'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D2''] in
    [_ ‚ä¢ oft/par D1' D2' M1]
  | [_ ‚ä¢ ‚áõcom] ‚áí
    let [_ ‚ä¢ oft/res DU[] \x.\y.oft/par (oft/inp (upd/n U1) \z.D1) (oft/out (upd/n (upd/n U2)) U3 D2) (mg/c (mg/c M T1[]) T2[])] = d in
    let Prune-Merge [_,x:obj ‚ä¢ M1'] [_,x:obj,y:obj ‚ä¢ _] = prune_merge [_,x:obj,y:obj ‚ä¢ M] in
    let Prune-Merge [_ ‚ä¢ M1] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1'] in
    let [_,x:obj,y:obj ‚ä¢ upd-istop _] = upd_var_istop [_,x:obj,y:obj ‚ä¢ U1[..,y,x]] in
    let Prune-Upd [_,x:obj ‚ä¢ U2''] [_,x:obj,y:obj ‚ä¢ _] = prune_upd [_,x:obj,y:obj ‚ä¢ U2] in
    let Prune-Upd [_ ‚ä¢ U2'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2''] in
    let [_,x:obj,y:obj ‚ä¢ upd-istop _] = upd_var_istop [_,x:obj,y:obj ‚ä¢ U3] in
    let [ ‚ä¢ ‚Ä¢/10] = [ ‚ä¢ T1] in
    let [ ‚ä¢ ‚Ä¢/01] = [ ‚ä¢ T2] in
    let [ ‚ä¢ du/r DU1]:[ ‚ä¢ dual (recv T U) (send T U')] = [ ‚ä¢ DU] in
    let [_ ‚ä¢ M1c] = merge_comm [_ ‚ä¢ M1] in
    let [_ ‚ä¢ merge-upd2 U4 U0 ‚Ä¢/10 M2c _ _ _] = merge_upd_cor2 [_ ‚ä¢ U2'] [_ ‚ä¢ M1c] [ ‚ä¢ ‚Ä¢/01] in
    let [_ ‚ä¢ M2]:[_ ‚ä¢ merge Œî‚ÇÅ' Œî‚ÇÇ' _] = merge_comm [_ ‚ä¢ M2c] in
    let [_ ‚ä¢ cx/refl] = upd_refl2 [_ ‚ä¢ U0] in
    let [_,x:obj ‚ä¢ U5] = upd_top [_,x:obj ‚ä¢ Œî‚ÇÇ'[..]] [_,x:obj ‚ä¢ x] [_,x:obj ‚ä¢ x] [ ‚ä¢ recv T U] [ ‚ä¢ U] [ ‚ä¢ ùüò] [ ‚ä¢ ùüò] in
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_upd (oft_rename [_,x:obj,y:obj,z:obj ‚ä¢ D1] [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U4[..])])
      (upd_top [_,x:obj,y:obj ‚ä¢ _] [_,x:obj,y:obj ‚ä¢ y] [_,x:obj,y:obj ‚ä¢ y] [ ‚ä¢ _] [ ‚ä¢ U'] [ ‚ä¢ _] [ ‚ä¢ _]) in
    let [_,x:obj,y:obj ‚ä¢ D2'] = oft_upd [_,x:obj,y:obj ‚ä¢ D2] [_,x:obj,y:obj ‚ä¢ upd/n U5[..,x]] in
    [_ ‚ä¢ oft/res DU1[] \x.\y.oft/par D1' D2' (mg/c (mg/c M2[..] ‚Ä¢/10) ‚Ä¢/01)]
  | [_ ‚ä¢ ‚áõpar R1] ‚áí
    let [_ ‚ä¢ oft/par D1 D2 M] = d in
    let [_ ‚ä¢ D1'] = tp_pres [_ ‚ä¢ R1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/par D1' D2 M]
  | [_ ‚ä¢ ‚áõres \x.\y.R1] ‚áí
    let [_ ‚ä¢ oft/res DU[] \x.\y.D1] = d in
    let [_,x:obj,y:obj ‚ä¢ D2] = tp_pres [_,x:obj,y:obj ‚ä¢ R1] [_,x:obj,y:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D2]
  | [_ ‚ä¢ ‚áõstruc C1 R1 C2] ‚áí oft_cong [_ ‚ä¢ C2] (tp_pres [_ ‚ä¢ R1] (oft_cong [_ ‚ä¢ C1] d))
  ;

%------------------------------------------------------%
% Canonical forms lemma
%------------------------------------------------------%

% @TODO

%------------------------------------------------------%
% Type safety
%------------------------------------------------------%

% @TODO