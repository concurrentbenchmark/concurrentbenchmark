%%
%% Note: inductive version of open similarity in finte pi calc, hopeless
Specification "finite-pic".

% Simulation defined inductively

Define sim : proc -> proc -> prop by
  sim P Q :=
    (forall A P1, {one P A P1} -> exists Q1, {one Q A Q1} /\ sim P1 Q1) /\
    (forall X M, {oneb P (dn X) M} -> exists N, {oneb Q (dn X) N} /\
                                                forall W, sim (M W) (N W)) /\
    (forall X M, {oneb P (up X) M} -> exists N, {oneb Q (up X) N} /\
                                                nabla w, sim (M w) (N w)).

Define is_proc : proc -> prop by
        is_proc null
     ;
is_proc (taup P)        := is_proc P
;  is_proc (nu P) := nabla x, is_proc (P x)
     ;  is_proc (par P Q) := is_proc P /\ is_proc Q
;  is_proc (plus P Q) := is_proc P /\ is_proc Q   
;  nabla x y , is_proc (out x y P) := is_proc P
;  nabla x, is_proc (in x P) := nabla x , is_proc (P x )
.

        
% Simulation is a preorder: this works

Theorem sim_trans : forall P Q R, sim P Q -> sim Q R -> sim P R.
induction on 1. intros. case H1. case H2. unfold.
  intros. apply H3 to H9. apply H6 to H10. apply IH to H11 H13. search.
  intros. apply H4 to H9. apply H7 to H10.
  exists N1. split. search.
    intros. apply H11 with W = W. apply H13 with W = W.
    apply IH to H14 H15. search.
  intros. apply H5 to H9. apply H8 to H10.
  apply IH to H11 H13. search.

% this seem hopeless             
Theorem sim_refl : forall P, is_proc P -> sim P P.
     induction on 1. intros. case H1.
% null
               unfold. intros. case H2.
intros. case H2.   
intros. case H2.
% tau
unfold. intros.
                         apply IH to H2. case H3. search.
   
     intros.    apply IH to H2. case H3.
intros.    apply IH to H2. case H3.   
% nu

unfold. intros.
                              apply IH to H2. case H3.
exists (nu Q).     split . search.
abort.   
