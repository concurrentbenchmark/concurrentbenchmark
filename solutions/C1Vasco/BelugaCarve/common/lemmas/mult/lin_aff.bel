%======================================================%
% Algebraic properties of multiplicities
% (linear / affine systems)
%======================================================%

% Remark: ‚Ä¢ is not total since ùüô ‚Ä¢ ùüô is undefined

% Functionality: If Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ± and Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ±', then Œ± = Œ±'

rec mult_func : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±'] ‚Üí [ ‚ä¢ mult_eq Œ± Œ±'] =
  / total /
  fn m1, m2 ‚áí case m1 of
  | [ ‚ä¢ ‚Ä¢/00] ‚áí let [ ‚ä¢ ‚Ä¢/00] = m2 in [ ‚ä¢ mult/refl]
  | [ ‚ä¢ ‚Ä¢/10] ‚áí let [ ‚ä¢ ‚Ä¢/10] = m2 in [ ‚ä¢ mult/refl]
  | [ ‚ä¢ ‚Ä¢/01] ‚áí let [ ‚ä¢ ‚Ä¢/01] = m2 in [ ‚ä¢ mult/refl]
  ;

% Identity: 
% (1) If Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ± and Œ±‚ÇÅ is an identity element, then Œ±‚ÇÇ = Œ±
% (2) For any Œ±, obtain an identity element Œ≤ such that Œ≤ ‚Ä¢ Œ± = Œ±

rec mult_id : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ ident Œ±‚ÇÅ] ‚Üí [ ‚ä¢ mult_eq Œ±‚ÇÇ Œ±] =
  / total /
  fn m, u ‚áí
  let [ ‚ä¢ ident/0] = u in
  case m of
  | [ ‚ä¢ ‚Ä¢/00] ‚áí [ ‚ä¢ mult/refl]
  | [ ‚ä¢ ‚Ä¢/01] ‚áí [ ‚ä¢ mult/refl]
  ;

LF get_u‚àô : mult ‚Üí type =
| get-u‚àô : ident Œ≤ ‚Üí ‚Ä¢ Œ≤ Œ± Œ± ‚Üí get_u‚àô Œ±;

rec mult_get_id : {Œ±:[ ‚ä¢ mult]} [ ‚ä¢ get_u‚àô Œ±] =
  / total /
  mlam Œ± ‚áí case [ ‚ä¢ Œ±] of
  | [ ‚ä¢ ùüò] ‚áí [ ‚ä¢ get-u‚àô ident/0 ‚Ä¢/00]
  | [ ‚ä¢ ùüô] ‚áí [ ‚ä¢ get-u‚àô ident/0 ‚Ä¢/01]
  ;

% Zero-sum-freedom: If Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ± and Œ± is an identity element, then Œ±‚ÇÅ = Œ±

rec mult_zsfree : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ ident Œ±] ‚Üí [ ‚ä¢ mult_eq Œ±‚ÇÅ Œ±] =
  / total /
  fn m, u ‚áí 
  let [ ‚ä¢ ident/0] = u in
  let [ ‚ä¢ ‚Ä¢/00] = m in
  [ ‚ä¢ mult/refl]
  ;

% Commutativity: If Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ±, then Œ±‚ÇÇ ‚àô Œ±‚ÇÅ = Œ±

rec mult_comm : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ ‚Ä¢ Œ±‚ÇÇ Œ±‚ÇÅ Œ±] =
  / total /
  fn m ‚áí case m of
  | [ ‚ä¢ ‚Ä¢/00] ‚áí [ ‚ä¢ ‚Ä¢/00]
  | [ ‚ä¢ ‚Ä¢/10] ‚áí [ ‚ä¢ ‚Ä¢/01]
  | [ ‚ä¢ ‚Ä¢/01] ‚áí [ ‚ä¢ ‚Ä¢/10]
  ;

% Associativity: If (Œ±‚ÇÅ ‚Ä¢ Œ±‚ÇÇ) ‚Ä¢ Œ±‚ÇÉ = Œ±, then Œ±‚ÇÅ ‚Ä¢ (Œ±‚ÇÇ ‚Ä¢ Œ±‚ÇÉ) = Œ±

LF ‚Ä¢assoc : ‚Ä¢ _ _ _ ‚Üí ‚Ä¢ _ _ _ ‚Üí type =
  ‚Ä¢/assoc : ‚Ä¢ Œ±‚ÇÇ Œ±‚ÇÉ Œ±‚ÇÇ‚ÇÉ ‚Üí ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ‚ÇÉ Œ± ‚Üí {M1:‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±‚ÇÅ‚ÇÇ} {M2:‚Ä¢ Œ±‚ÇÅ‚ÇÇ Œ±‚ÇÉ Œ±} ‚Ä¢assoc M1 M2;

rec mult_assoc : {M1:[ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±‚ÇÅ‚ÇÇ]} {M2:[ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ‚ÇÇ Œ±‚ÇÉ Œ±]} [ ‚ä¢ ‚Ä¢assoc M1 M2] =
  / total 2 /
  mlam M1, M2 ‚áí case [ ‚ä¢ M2] of
  | [ ‚ä¢ ‚Ä¢/00] ‚áí let [ ‚ä¢ ‚Ä¢/00] = [ ‚ä¢ M1] in [ ‚ä¢ ‚Ä¢/assoc ‚Ä¢/00 ‚Ä¢/00 M1 M2]
  | [ ‚ä¢ ‚Ä¢/01] ‚áí let [ ‚ä¢ ‚Ä¢/00] = [ ‚ä¢ M1] in [ ‚ä¢ ‚Ä¢/assoc ‚Ä¢/01 ‚Ä¢/01 M1 M2]
  | [ ‚ä¢ ‚Ä¢/10] ‚áí case [ ‚ä¢ M1] of
    | [ ‚ä¢ ‚Ä¢/10] ‚áí [ ‚ä¢ ‚Ä¢/assoc ‚Ä¢/00 ‚Ä¢/10 M1 M2]
    | [ ‚ä¢ ‚Ä¢/01] ‚áí [ ‚ä¢ ‚Ä¢/assoc ‚Ä¢/10 ‚Ä¢/01 M1 M2]
  ;

% Cancellativity: If Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = Œ± and Œ±‚ÇÅ ‚àô Œ±‚ÇÇ' = Œ±, then Œ±‚ÇÇ = Œ±‚ÇÇ'

rec mult_canc : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ' Œ±] ‚Üí [ ‚ä¢ mult_eq Œ±‚ÇÇ Œ±‚ÇÇ'] =
  / total /
  fn m1, m2 ‚áí case m1 of
  | [ ‚ä¢ ‚Ä¢/00] ‚áí let [ ‚ä¢ ‚Ä¢/00] = m2 in [ ‚ä¢ mult/refl]
  | [ ‚ä¢ ‚Ä¢/10] ‚áí let [ ‚ä¢ ‚Ä¢/10] = m2 in [ ‚ä¢ mult/refl]
  | [ ‚ä¢ ‚Ä¢/01] ‚áí let [ ‚ä¢ ‚Ä¢/01] = m2 in [ ‚ä¢ mult/refl]
  ;

% Corollaries

rec mult_id_cor : [ ‚ä¢ ‚Ä¢ ùüò Œ±‚ÇÇ Œ±] ‚Üí [ ‚ä¢ mult_eq Œ±‚ÇÇ Œ±] =
  / total /
  fn m ‚áí mult_id m [ ‚ä¢ ident/0]
  ;

rec mult_zsfree_cor : [ ‚ä¢ ‚Ä¢ Œ±‚ÇÅ Œ±‚ÇÇ ùüò] ‚Üí [ ‚ä¢ mult_eq Œ±‚ÇÅ ùüò] =
  / total /
  fn m ‚áí mult_zsfree m [ ‚ä¢ ident/0]
  ;

rec mult_get_id_cor : {Œ±:[ ‚ä¢ mult]} [ ‚ä¢ ‚Ä¢ ùüò Œ± Œ±] =
  / total /
  mlam Œ± ‚áí let [ ‚ä¢ get-u‚àô ident/0 M] = mult_get_id [ ‚ä¢ Œ±] in [ ‚ä¢ M]
  ;

%------------------------------------------------------%
% Properties of harmless elements
%------------------------------------------------------%

% Technical lemmas about harmless elements (used to prove context lemmas)

rec mult_hal_id : [ ‚ä¢ hal Œ±] ‚Üí [ ‚ä¢ ‚Ä¢ Œ± Œ± Œ±] =
  / total /
  fn u ‚áí let [ ‚ä¢ hal/0] = u in [ ‚ä¢ ‚Ä¢/00]
  ;

rec mult_ident_hal : [ ‚ä¢ ident Œ±] ‚Üí [ ‚ä¢ hal Œ±] =
  / total /
  fn u ‚áí let [ ‚ä¢ ident/0] = u in [ ‚ä¢ hal/0]
  ;

rec mult_hal_ident : [ ‚ä¢ hal Œ±] ‚Üí [ ‚ä¢ ident Œ±] =
  / total /
  fn u ‚áí let [ ‚ä¢ hal/0] = u in [ ‚ä¢ ident/0]
  ;
