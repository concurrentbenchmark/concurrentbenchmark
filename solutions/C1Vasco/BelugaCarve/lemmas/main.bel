%======================================================%
% Properties of typing judgment
%======================================================%

% If Œî ‚ä¢ P, x :Œ± T ‚àà Œî, and x ‚àâ fv(P), then Œ± = ùüò

rec oft_notin_fv : (Œ®:ctx) (Œî:[Œ®,x:obj ‚ä¢ lctx K[]])
[Œ®,x:obj ‚ä¢ oft Œî P[..]] ‚Üí [Œ®,x:obj ‚ä¢ upd Œî n[] x Y T[] S[] Œ±[] Œ≤[] Œî']
‚Üí [ ‚ä¢ mult_eq Œ± ùüò] =
  / total g (oft_notin_fv g) /
  fn d, u ‚áí
  let [_,x:obj ‚ä¢ U] = u in
  case d of
  | [_,x:obj ‚ä¢ oft/null E1] ‚áí let [ ‚ä¢ hal/0] = exh_lookup [_ ‚ä¢ E1] u in [ ‚ä¢ mult/refl]
  | [_,x:obj ‚ä¢ oft/wait U1 D1] ‚áí
    let [_,x:obj ‚ä¢ lookintm U2] = lookup_upd [_,x:obj ‚ä¢ U1] u (lookup_neq_var2nat [_,x:obj ‚ä¢ U1] u neq_top) in
    oft_notin_fv [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ U2]
  | [_,x:obj ‚ä¢ oft/close U1 D1] ‚áí
    let [_,x:obj ‚ä¢ lookintm U2] = lookup_upd [_,x:obj ‚ä¢ U1] u (lookup_neq_var2nat [_,x:obj ‚ä¢ U1] u neq_top) in
    oft_notin_fv [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ U2]
  | [_,x:obj ‚ä¢ oft/inp U1 \y.D1] ‚áí
    let [_,x:obj ‚ä¢ lookintm U2] = lookup_upd [_,x:obj ‚ä¢ U1] u (lookup_neq_var2nat [_,x:obj ‚ä¢ U1] u neq_top) in
    oft_notin_fv [_,y:obj,x:obj ‚ä¢ D1[..,x,y]] [_,y:obj,x:obj ‚ä¢ upd/n U2[..,x]]
  | [_,x:obj ‚ä¢ oft/out U1 U2 D1] ‚áí
    let [_,x:obj ‚ä¢ lookintm U3] = lookup_upd [_,x:obj ‚ä¢ U1] u (lookup_neq_var2nat [_,x:obj ‚ä¢ U1] u neq_top) in
    let [_,x:obj ‚ä¢ lookintm U4] = lookup_upd [_,x:obj ‚ä¢ U2] [_,x:obj ‚ä¢ U3] (lookup_neq_var2nat [_,x:obj ‚ä¢ U2] [_,x:obj ‚ä¢ U3] neq_top) in
    oft_notin_fv [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ U4]
  | [_,x:obj ‚ä¢ oft/par D1 D2 M1] ‚áí
    let [_,x:obj ‚ä¢ merge-look U1 U2 MLT[] _ _] = merge_lookup [_,x:obj ‚ä¢ U] [_,x:obj ‚ä¢ M1] in
    let [ ‚ä¢ mult/refl] = oft_notin_fv [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ U1] in
    let [ ‚ä¢ mult/refl] = oft_notin_fv [_,x:obj ‚ä¢ D2] [_,x:obj ‚ä¢ U2] in
    let [ ‚ä¢ ‚Ä¢/00] = [ ‚ä¢ MLT] in
    [ ‚ä¢ mult/refl]
  | [_,x:obj ‚ä¢ oft/res _ \y.\z.D1] ‚áí
    oft_notin_fv [_,y:obj,z:obj,x:obj ‚ä¢ D1[..,x,y,z]] [_,y:obj,z:obj,x:obj ‚ä¢ upd/n (upd/n U[..,x])]
  ;

% If Œî ‚ä¢ P then Œî[x ‚Üî y] ‚ä¢ P

rec oft_exch : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî P] ‚Üí [Œ® ‚ä¢ exch Œî n X m Y Œî'] ‚Üí [Œ® ‚ä¢ oft Œî' P] =
  / total 1 /
  fn d, e ‚áí
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = e in
  case d of
  | [_ ‚ä¢ oft/null E1] ‚áí let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] e in [_ ‚ä¢ oft/null E2]
  | [_ ‚ä¢ oft/wait U1 D1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ D2] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ oft/wait U2 D2]
  | [_ ‚ä¢ oft/close U1 D1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ D2] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ oft/close U2 D2]
  | [_ ‚ä¢ oft/inp U1 \x.D1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_,x:obj ‚ä¢ D2] = oft_exch [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1'[..]) (upd/n EX2'[..])] in
    [_ ‚ä¢ oft/inp U2 \x.D2]
  | [_ ‚ä¢ oft/out U1 U2 D1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U3 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ exch-e EX1'' EX2'' U4 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1'] [_ ‚ä¢ EX2'] [_ ‚ä¢ U2] in
    let [_ ‚ä¢ D2] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] EX1'' EX2''] in
    [_ ‚ä¢ oft/out U3 U4 D2]
  | [_ ‚ä¢ oft/par D1 D2 M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ D1'] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_ ‚ä¢ D2'] = oft_exch [_ ‚ä¢ D2] [_ ‚ä¢ exch/u NEQ[] EX1b EX2b] in
    [_ ‚ä¢ oft/par D1' D2' M2]
  | [_ ‚ä¢ oft/res DU[] \x.\y.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D2] = oft_exch [_,x:obj,y:obj ‚ä¢ D1] [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] (upd/n (upd/n EX1[..])) (upd/n (upd/n EX2[..]))] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D2]
  ;

rec oft_exch_top : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) P] ‚Üí [Œ® ‚ä¢ oft (cons (cons Œî Y B[] Œ≤[]) X A[] Œ±[]) P] =
  / total /
  fn d ‚áí oft_exch d (exch_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _])
  ;

rec oft_exch_top2 : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]])
[Œ® ‚ä¢ oft (cons (cons (cons Œî X A Œ±) Y B Œ≤) Z C Œ≥) P] ‚Üí [Œ® ‚ä¢ oft (cons (cons (cons Œî Y B Œ≤) Z C Œ≥) X A Œ±) P] =
  / total /
  fn d1 ‚áí
  let [_ ‚ä¢ _]:[_ ‚ä¢ oft (cons (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) _ _ _) _] = d1 in
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_ ‚ä¢ Œî] [_ ‚ä¢ X] [ ‚ä¢ A] [ ‚ä¢ Œ±] [_ ‚ä¢ Y] [ ‚ä¢ B] [ ‚ä¢ Œ≤] in
  oft_exch_top (oft_exch d1 [_ ‚ä¢ exch/u NEQ[] (upd/n EX1) (upd/n EX2)])
  ;

% Strengthening lemma: If Œî, x :‚Å∞ T ‚ä¢ P, then x ‚àâ fv(P) and Œî ‚ä¢ P

inductive StrTop: (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) {D:[Œ® ‚ä¢ oft Œî P]} ctype =
  | Str-Top : [Œ® ‚ä¢ oft Œî P] ‚Üí {D:[Œ®,x:obj ‚ä¢ oft (cons Œî[..] x A[] ùüò) P[..]]} StrTop [Œ®,x:obj ‚ä¢ D]
  ;

rec oft_str : {D:[Œ®,x:obj ‚ä¢ oft (cons Œî[..] x A[] ùüò) P]} StrTop [Œ®,x:obj ‚ä¢ D] =
  / total d (oft_str d) /
  mlam D ‚áí case [_ ‚ä¢ D] of
  | [_,x:obj ‚ä¢ oft/null (exh/c E1 _)] ‚áí
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    Str-Top [_ ‚ä¢ oft/null E2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/wait (upd/n U1) D1] ‚áí
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Str-Top [_ ‚ä¢ D2] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
    Str-Top [_ ‚ä¢ oft/wait U2 D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/close (upd/n U1) D1] ‚áí
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Str-Top [_ ‚ä¢ D2] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
    Str-Top [_ ‚ä¢ oft/close U2 D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/inp (upd/n U1) \y.D1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_exch_top [_,y:obj,x:obj ‚ä¢ D1[..,x,y]] in
    let Str-Top [_,x:obj ‚ä¢ D2] [_,x:obj,y:obj ‚ä¢ _] = oft_str [_,x:obj,y:obj ‚ä¢ D1'] in
    Str-Top [_ ‚ä¢ oft/inp U1' \x.D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/out (upd/n U1) (upd/n U2) D1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Upd [_ ‚ä¢ U2'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2] in
    let Str-Top [_ ‚ä¢ D2] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
    Str-Top [_ ‚ä¢ oft/out U1' U2' D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/par D1 D2 (mg/c M1 ‚Ä¢/00)] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
    let Str-Top [_ ‚ä¢ D2'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D2] in
    Str-Top [_ ‚ä¢ oft/par D1' D2' M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/res DU[] \y.\z.D1] ‚áí
    let [_,x:obj,y:obj,z:obj ‚ä¢ D1'] = oft_exch_top2 [_,y:obj,z:obj,x:obj ‚ä¢ D1[..,x,y,z]] in
    let Str-Top [_,x:obj,y:obj ‚ä¢ D2] [_,x:obj,y:obj,z:obj ‚ä¢ _] = oft_str [_,x:obj,y:obj,z:obj ‚ä¢ D1'] in
    Str-Top [_ ‚ä¢ oft/res DU[] \x.\y.D2] [_,x:obj ‚ä¢ _]
  ;

% Weakening lemma: If Œî ‚ä¢ P, then Œî, x :‚Å∞ T ‚ä¢ P

rec oft_weak : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]])
[Œ® ‚ä¢ oft Œî P] ‚Üí {X:[Œ® ‚ä¢ obj]} {T:[ ‚ä¢ tp]} ‚Üí [Œ® ‚ä¢ oft (cons Œî X T[] ùüò) P] =
  / total 1 /
  fn d ‚áí mlam X, T ‚áí case d of
  | [_ ‚ä¢ oft/null E1] ‚áí [_ ‚ä¢ oft/null (exh/c E1 hal/0)]
  | [_ ‚ä¢ oft/wait U1 D1] ‚áí
    let [_ ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [_ ‚ä¢ X] [ ‚ä¢ T] in
    [_ ‚ä¢ oft/wait (upd/n U1) D1']
  | [_ ‚ä¢ oft/close U1 D1] ‚áí
    let [_ ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [_ ‚ä¢ X] [ ‚ä¢ T] in
    [_ ‚ä¢ oft/close (upd/n U1) D1']
  | [_ ‚ä¢ oft/inp U1 \x.D1] ‚áí
    let [_,x:obj ‚ä¢ D1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ T]) in
    [_ ‚ä¢ oft/inp (upd/n U1) \x.D1']
  | [_ ‚ä¢ oft/out U1 U2 D1] ‚áí
    let [_ ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [_ ‚ä¢ X] [ ‚ä¢ T] in
    [_ ‚ä¢ oft/out (upd/n U1) (upd/n U2) D1']
  | [_ ‚ä¢ oft/par D1 D2 M1] ‚áí
    let [_ ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [_ ‚ä¢ X] [ ‚ä¢ T] in
    let [_ ‚ä¢ D2'] = oft_weak [_ ‚ä¢ D2] [_ ‚ä¢ X] [ ‚ä¢ T] in
    [_ ‚ä¢ oft/par D1' D2' (mg/c M1 ‚Ä¢/00)]
  | [_ ‚ä¢ oft/res DU[] \x.\y.D1] ‚áí
    let [_,x:obj,y:obj,z:obj ‚ä¢ D2] = oft_exch_top2 (oft_exch_top2 (oft_weak [_,x:obj,y:obj ‚ä¢ D1] [_,x:obj,y:obj ‚ä¢ X[..]] [ ‚ä¢ T])) in
    [_,x:obj ‚ä¢ oft/res DU[] \y.\z.D2]
  ;

% If Œî ‚ä¢ P, then Œî[x :‚Å∞ T ‚Ü¶ y :‚Å∞ S] ‚ä¢ P for any y,S

rec oft_upd : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî P] ‚Üí [Œ® ‚ä¢ upd Œî n[] X X' T[] T'[] ùüò ùüò Œî']
‚Üí [Œ® ‚ä¢ oft Œî' P] =
  / total 1 /
  fn d, u ‚áí
  let [_ ‚ä¢ U] = u in
  case d of
  | [_ ‚ä¢ oft/null E1] ‚áí
    let [_ ‚ä¢ E2] = exh_changetp [_ ‚ä¢ E1] [ ‚ä¢ hal/0] u in
    [_ ‚ä¢ oft/null E2]
  | [_ ‚ä¢ oft/wait U1 D1] ‚áí
    let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1]) in
    let [_ ‚ä¢ D2] = oft_upd [_ ‚ä¢ D1] [_ ‚ä¢ U3] in
    [_ ‚ä¢ oft/wait U2 D2]
  | [_ ‚ä¢ oft/close U1 D1] ‚áí
    let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1]) in
    let [_ ‚ä¢ D2] = oft_upd [_ ‚ä¢ D1] [_ ‚ä¢ U3] in
    [_ ‚ä¢ oft/close U2 D2]
  | [_ ‚ä¢ oft/inp U1 \x.D1] ‚áí
    let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1]) in
    let [_,x:obj ‚ä¢ D2] = oft_upd [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ upd/n U3[..]] in
    [_ ‚ä¢ oft/inp U2 \x.D2]
  | [_ ‚ä¢ oft/out U1 U2 D1] ‚áí
    let [_ ‚ä¢ upd-po U3 U4 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1]) in
    let [_ ‚ä¢ upd-po U5 U6 _ _] = upd_pushout [_ ‚ä¢ U4] [_ ‚ä¢ U2] (lookup_lab_neq_2 [_ ‚ä¢ U4] [_ ‚ä¢ U2]) in
    let [_ ‚ä¢ D2] = oft_upd [_ ‚ä¢ D1] [_ ‚ä¢ U6] in
    [_ ‚ä¢ oft/out U3 U5 D2]
  | [_ ‚ä¢ oft/par D1 D2 M1] ‚áí
    let [_ ‚ä¢ merge-upd U1 U2 ‚Ä¢/00 M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M1] [ ‚ä¢ ‚Ä¢/00] in
    let [_ ‚ä¢ D1'] = oft_upd [_ ‚ä¢ D1] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ D2'] = oft_upd [_ ‚ä¢ D2] [_ ‚ä¢ U2] in
    [_ ‚ä¢ oft/par D1' D2' M2]
  | [_ ‚ä¢ oft/res DU[] \x.\y.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_upd [_,x:obj,y:obj ‚ä¢ D1] [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U[..])] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D1']
  ;

% Substitution / renaming lemma:
% If Œî, x :¬π T ‚ä¢ P, then Œî[y :‚Å∞ T ‚Ü¶‚Çô y :¬π T] ‚ä¢ P[y/x]

rec oft_rename : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ®,x:obj ‚ä¢ oft (cons Œî[..] x T[] ùüô) P] ‚Üí [Œ® ‚ä¢ upd Œî n[] X X T[] T[] ùüò ùüô Œî']
‚Üí [Œ® ‚ä¢ oft Œî' P[..,X]] =
  / total d (oft_rename d) /
  fn d, u ‚áí
  let [_ ‚ä¢ U] = u in
  let [_ ‚ä¢ U'] = upd_symm u in
  case d of
  | [_,x:obj ‚ä¢ oft/null (exh/c _ UN[])] ‚áí impossible [ ‚ä¢ UN]
  | [_,x:obj ‚ä¢ oft/wait U1 D1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
      [_ ‚ä¢ oft/wait U' D1']
    | [_,x:obj ‚ä¢ upd/n U1'] ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1''] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1'']) in
      let [_ ‚ä¢ D1'] = oft_rename [_,x:obj ‚ä¢ D1] [_ ‚ä¢ U3] in
      [_ ‚ä¢ oft/wait U2 D1']
    )
  | [_,x:obj ‚ä¢ oft/close U1 D1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
      [_ ‚ä¢ oft/close U' D1']
    | [_,x:obj ‚ä¢ upd/n U1'] ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1''] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1'']) in
      let [_ ‚ä¢ D1'] = oft_rename [_,x:obj ‚ä¢ D1] [_ ‚ä¢ U3] in
      [_ ‚ä¢ oft/close U2 D1']
    )
  | [_,x:obj ‚ä¢ oft/inp U1 \y.D1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_ ‚ä¢ _]:[_ ‚ä¢ upd _ _ Z Z (recv T[] S[]) (recv T[] S[]) ùüò ùüô Œî'] = u in
      let [_ ‚ä¢ get-upd U2] = lookup_getupd (upd_symm u) [_ ‚ä¢ Z] [ ‚ä¢ S] [ ‚ä¢ ùüò] in
      let [_ ‚ä¢ get-upd U3] = lookup_getupd (upd_symm u) [_ ‚ä¢ Z] [ ‚ä¢ S] [ ‚ä¢ ùüô] in
      let [_ ‚ä¢ U4] = upd_trans u [_ ‚ä¢ U2] in
      let [_ ‚ä¢ U5] = upd_trans (upd_symm [_ ‚ä¢ U2]) [_ ‚ä¢ U3] in
      let [_,x:obj,y:obj ‚ä¢ D1'] = oft_exch_top (oft_upd [_,x:obj,y:obj ‚ä¢ D1] [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U4[..])]) in
      let [_,x:obj ‚ä¢ D1''] = oft_rename [_,x:obj,y:obj ‚ä¢ D1'[..,y,x]] [_,x:obj ‚ä¢ upd/n U5[..]] in
      [_ ‚ä¢ oft/inp U3 \x.D1'']
    | [_,x:obj ‚ä¢ upd/n U1'] ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ upd-po U3 U4 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1''] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1'']) in
      let [_,x:obj ‚ä¢ D1'] = oft_rename (oft_exch_top [_,x:obj,y:obj ‚ä¢ D1[..,y,x]]) [_,x:obj ‚ä¢ upd/n U4[..]] in
      [_ ‚ä¢ oft/inp U3 \x.D1']
    )
  | [_,x:obj ‚ä¢ oft/out U1 U2 D1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj ‚ä¢ upd/n U2'] = [_,x:obj ‚ä¢ U2] in
      let Prune-Upd [_ ‚ä¢ U2''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2'] in
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
      [_ ‚ä¢ oft/out U' U2'' D1']
    | [_,x:obj ‚ä¢ upd/n U1'] ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ upd-po U3 U4 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1''] (lookup_lab_neq_2 [_ ‚ä¢ U] [_ ‚ä¢ U1'']) in
      (case [_,x:obj ‚ä¢ U2] of
      | [_,x:obj ‚ä¢ upd/t _] ‚áí
        let [_ ‚ä¢ _]:[_ ‚ä¢ upd _ _ X X (send T[] S[]) (send T[] S[]) ùüò ùüô Œî''] = [_ ‚ä¢ U4] in
        let [_ ‚ä¢ get-upd U5] = lookup_getupd [_ ‚ä¢ U4] [_ ‚ä¢ X] [ ‚ä¢ S] [ ‚ä¢ ùüò] in
        let [_ ‚ä¢ get-upd U6] = lookup_getupd [_ ‚ä¢ U4] [_ ‚ä¢ X] [ ‚ä¢ S] [ ‚ä¢ ùüô] in
        let [_ ‚ä¢ U7] = upd_trans (upd_symm [_ ‚ä¢ U4]) [_ ‚ä¢ U6] in
        let [_,x:obj ‚ä¢ D1'] = oft_upd [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ upd/n U5[..]] in
        let [_ ‚ä¢ D1''] = oft_rename [_,x:obj ‚ä¢ D1'] (upd_trans (upd_symm [_ ‚ä¢ U5]) [_ ‚ä¢ U6]) in
        [_ ‚ä¢ oft/out U3 U7 D1'']
      | [_,x:obj ‚ä¢ upd/n U2'] ‚áí
        let Prune-Upd [_ ‚ä¢ U2''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2'] in
        let [_ ‚ä¢ upd-po U5 U6 _ _] = upd_pushout [_ ‚ä¢ U4] [_ ‚ä¢ U2''] (lookup_lab_neq_2 [_ ‚ä¢ U4] [_ ‚ä¢ U2'']) in
        let [_ ‚ä¢ D1'] = oft_rename [_,x:obj ‚ä¢ D1] [_ ‚ä¢ U6] in
        [_ ‚ä¢ oft/out U3 U5 D1']
      )
    )
  | [_,x:obj ‚ä¢ oft/par D1 D2 (mg/c M1 T[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_ ‚ä¢ merge-upd U1 U2 ‚Ä¢/00 M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M2] [ ‚ä¢ T] in
    (case [ ‚ä¢ T] of
    | [ ‚ä¢ ‚Ä¢/10] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_refl2 [_ ‚ä¢ U2] in
      let [_ ‚ä¢ D1'] = oft_rename [_,x:obj ‚ä¢ D1] [_ ‚ä¢ U1] in
      let Str-Top [_ ‚ä¢ D2'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D2] in
      [_ ‚ä¢ oft/par D1' D2' M2]
    | [ ‚ä¢ ‚Ä¢/01] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_refl2 [_ ‚ä¢ U1] in
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D1] in
      let [_ ‚ä¢ D2'] = oft_rename [_,x:obj ‚ä¢ D2] [_ ‚ä¢ U2] in
      [_ ‚ä¢ oft/par D1' D2' M2]
    )
  | [_,x:obj ‚ä¢ oft/res DU[] \y.\z.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_rename (oft_exch_top2 [_,y:obj,z:obj,x:obj ‚ä¢ D1[..,x,y,z]]) [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U[..])] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D1']
  ;

% Preservation for ‚â°

rec oft_cong : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ P ‚â° Q] ‚Üí [Œ® ‚ä¢ oft Œî P] ‚Üí [Œ® ‚ä¢ oft Œî Q] =
  / total 1 /
  fn c, d ‚áí case c of
  % axioms
  | [_ ‚ä¢ ‚â°par/comm] ‚áí
    let [_ ‚ä¢ oft/par D1 D2 M] = d in
    let [_ ‚ä¢ M'] = merge_comm [_ ‚ä¢ M] in
    [_ ‚ä¢ oft/par D2 D1 M']
  | [_ ‚ä¢ ‚â°par/assoc] ‚áí
    let [_ ‚ä¢ oft/par (oft/par D1 D2 M1) D3 M2] = d in
    let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M2] [_ ‚ä¢ M1] in
    [_ ‚ä¢ oft/par D1 (oft/par D2 D3 M3) M4]
  | [_ ‚ä¢ ‚â°par/null _] ‚áí
    let [_ ‚ä¢ oft/par D1 (oft/null E) M] = d in
    let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M]) [_ ‚ä¢ E] in
    [_ ‚ä¢ D1]
  | [_ ‚ä¢ ‚â°res/par] ‚áí
    let [_ ‚ä¢ oft/par (oft/res DU[] \x.\y.D1) D2 M] = d in
    let [ ‚ä¢ _]:[ ‚ä¢ dual T T'] = [ ‚ä¢ DU] in
    let [_,x:obj ‚ä¢ D3'] = oft_weak [_,x:obj ‚ä¢ D2[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ T] in
    let [_,x:obj,y:obj ‚ä¢ D3] = oft_weak [_,x:obj,y:obj ‚ä¢ D3'[..,x]] [_,x:obj,y:obj ‚ä¢ y] [ ‚ä¢ T'] in
    [_ ‚ä¢ oft/res DU[] \x.\y.oft/par D1 D3 (mg/c (mg/c M[..] ‚Ä¢/10) ‚Ä¢/10)]
  | [_ ‚ä¢ ‚â°res] ‚áí
    let [_ ‚ä¢ oft/res DU1[] \w.\x.oft/res DU2[] \y.\z.D1] = d in
    let [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ _]:[_,w:obj,x:obj,y:obj,z:obj ‚ä¢ oft (cons (cons (cons (cons Œî[..] _ T[] _) _ T'[] _) _ U[] _) _ U'[] _) _] = [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D1] in
    let [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_,x:obj,y:obj ‚ä¢ Œî[..]] [_,x:obj,y:obj ‚ä¢ x] [ ‚ä¢ T] [ ‚ä¢ ùüô] [_,x:obj,y:obj ‚ä¢ y] [ ‚ä¢ U] [ ‚ä¢ ùüô] in
    let [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D2'[..,y,z,w,x]] = oft_exch_top (oft_exch_top2 (oft_exch (oft_exch_top2 [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D1])
      [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ exch/u NEQ[] (upd/n (upd/n EX1[..,w,y])) (upd/n (upd/n EX2[..,w,y]))])) in
    [_ ‚ä¢ oft/res DU2[] \w.\x.oft/res DU1[] \y.\z.D2']
  % congruence rules
  | [_ ‚ä¢ ‚â°c/null] ‚áí d
  | [_ ‚ä¢ ‚â°c/wait C1] ‚áí
    let [_ ‚ä¢ oft/wait U1 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/wait U1 D1']
  | [_ ‚ä¢ ‚â°c/close C1] ‚áí
    let [_ ‚ä¢ oft/close U1 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/close U1 D1']
  | [_ ‚ä¢ ‚â°c/inp \x.C1] ‚áí
    let [_ ‚ä¢ oft/inp U1 \x.D1] = d in
    let [_,x:obj ‚ä¢ D1'] = oft_cong [_,x:obj ‚ä¢ C1] [_,x:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/inp U1 \x.D1']
  | [_ ‚ä¢ ‚â°c/out C1] ‚áí
    let [_ ‚ä¢ oft/out U1 U2 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/out U1 U2 D1']
  | [_ ‚ä¢ ‚â°c/par C1] ‚áí % C2
    let [_ ‚ä¢ oft/par D1 D2 M] = d in
    let [_ ‚ä¢ D1'] = oft_cong [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    %let [_ ‚ä¢ D2'] = oft_cong [_ ‚ä¢ C2] [_ ‚ä¢ D2] in
    [_ ‚ä¢ oft/par D1' D2 M]
  | [_ ‚ä¢ ‚â°c/res \x.\y.C1] ‚áí
    let [_ ‚ä¢ oft/res DU[] \x.\y.D1] = d in
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_cong [_,x:obj,y:obj ‚ä¢ C1] [_,x:obj,y:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D1']
  % symmetry, transitivity
  | [_ ‚ä¢ ‚â°sym C1] ‚áí oft_cong_symm [_ ‚ä¢ C1] d
  | [_ ‚ä¢ ‚â°trans C1 C2] ‚áí oft_cong [_ ‚ä¢ C2] (oft_cong [_ ‚ä¢ C1] d)

and rec oft_cong_symm : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ P ‚â° Q] ‚Üí [Œ® ‚ä¢ oft Œî Q] ‚Üí [Œ® ‚ä¢ oft Œî P] =
  / total 1 /
  fn c, d ‚áí case c of
  | [_ ‚ä¢ ‚â°par/comm] ‚áí
    let [_ ‚ä¢ oft/par D1 D2 M] = d in
    let [_ ‚ä¢ M'] = merge_comm [_ ‚ä¢ M] in
    [_ ‚ä¢ oft/par D2 D1 M']
  | [_ ‚ä¢ ‚â°par/assoc] ‚áí
    let [_ ‚ä¢ oft/par D1 (oft/par D2 D3 M1) M2] = d in
    let [_ ‚ä¢ M2'] = merge_comm [_ ‚ä¢ M2] in
    let [_ ‚ä¢ mg-assoc2 M3' M4 _ _] = merge_assoc_2 [_ ‚ä¢ M2'] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ M3] = merge_comm [_ ‚ä¢ M3'] in
    [_ ‚ä¢ oft/par (oft/par D1 D2 M3) D3 M4]
  | [_ ‚ä¢ ‚â°par/null _] ‚áí
    let [_ ‚ä¢ D1]:[_ ‚ä¢ oft Œî _] = d in
    let [_ ‚ä¢ merge-getid M E1] = merge_getid [_ ‚ä¢ Œî] in
    [_ ‚ä¢ oft/par D1 (oft/null E1) M]
  | [_ ‚ä¢ ‚â°res/par] ‚áí
    let [_ ‚ä¢ oft/res DU[] \x.\y.oft/par D1 D2 (mg/c (mg/c M1 T1[]) T2[])] = d in
    let Prune-Merge [_,x:obj ‚ä¢ M1'] [_,x:obj,y:obj ‚ä¢ _] = prune_merge [_,x:obj,y:obj ‚ä¢ M1] in
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1'] in
    let [ ‚ä¢ mult/refl] = oft_notin_fv [_,x:obj,y:obj ‚ä¢ D2] (refl_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _]) in
    let Str-Top [_,x:obj ‚ä¢ D2'] [_,x:obj,y:obj ‚ä¢ _] = oft_str [_,x:obj,y:obj ‚ä¢ D2] in
    let [ ‚ä¢ mult/refl] = oft_notin_fv [_,x:obj ‚ä¢ D2'] (refl_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _]) in
    let Str-Top [_ ‚ä¢ D2''] [_,x:obj ‚ä¢ _] = oft_str [_,x:obj ‚ä¢ D2'] in
    let ([ ‚ä¢ ‚Ä¢/10],[ ‚ä¢ ‚Ä¢/10]) = ([ ‚ä¢ T1],[ ‚ä¢ T2]) in
    [_ ‚ä¢ oft/par (oft/res DU[] \x.\y.D1) D2'' M2]
  | [_ ‚ä¢ ‚â°res] ‚áí
    let [_ ‚ä¢ oft/res DU1[] \w.\x.oft/res DU2[] \y.\z.D1] = d in
    let [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ _]:[_,w:obj,x:obj,y:obj,z:obj ‚ä¢ oft (cons (cons (cons (cons Œî[..] _ T[] _) _ T'[] _) _ U[] _) _ U'[] _) _] = [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D1] in
    let [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_,x:obj,y:obj ‚ä¢ Œî[..]] [_,x:obj,y:obj ‚ä¢ x] [ ‚ä¢ T] [ ‚ä¢ ùüô] [_,x:obj,y:obj ‚ä¢ y] [ ‚ä¢ U] [ ‚ä¢ ùüô] in
    let [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D2'[..,y,z,w,x]] = oft_exch_top (oft_exch_top2 (oft_exch (oft_exch_top2 [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ D1])
      [_,w:obj,x:obj,y:obj,z:obj ‚ä¢ exch/u NEQ[] (upd/n (upd/n EX1[..,w,y])) (upd/n (upd/n EX2[..,w,y]))])) in
    [_ ‚ä¢ oft/res DU2[] \w.\x.oft/res DU1[] \y.\z.D2']
  % congruence rules
  | [_ ‚ä¢ ‚â°c/null] ‚áí d
  | [_ ‚ä¢ ‚â°c/wait C1] ‚áí
    let [_ ‚ä¢ oft/wait U1 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong_symm [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/wait U1 D1']
  | [_ ‚ä¢ ‚â°c/close C1] ‚áí
    let [_ ‚ä¢ oft/close U1 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong_symm [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/close U1 D1']
  | [_ ‚ä¢ ‚â°c/inp \x.C1] ‚áí
    let [_ ‚ä¢ oft/inp U1 \x.D1] = d in
    let [_,x:obj ‚ä¢ D1'] = oft_cong_symm [_,x:obj ‚ä¢ C1] [_,x:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/inp U1 \x.D1']
  | [_ ‚ä¢ ‚â°c/out C1] ‚áí
    let [_ ‚ä¢ oft/out U1 U2 D1] = d in
    let [_ ‚ä¢ D1'] = oft_cong_symm [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    [_ ‚ä¢ oft/out U1 U2 D1']
  | [_ ‚ä¢ ‚â°c/par C1] ‚áí % C2
    let [_ ‚ä¢ oft/par D1 D2 M] = d in
    let [_ ‚ä¢ D1'] = oft_cong_symm [_ ‚ä¢ C1] [_ ‚ä¢ D1] in
    %let [_ ‚ä¢ D2'] = oft_cong_symm [_ ‚ä¢ C2] [_ ‚ä¢ D2] in
    [_ ‚ä¢ oft/par D1' D2 M]
  | [_ ‚ä¢ ‚â°c/res \x.\y.C1] ‚áí
    let [_ ‚ä¢ oft/res DU[] \x.\y.D1] = d in
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_cong_symm [_,x:obj,y:obj ‚ä¢ C1] [_,x:obj,y:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/res DU[] \x.\y.D1']
  % symmetry, transitivity
  | [_ ‚ä¢ ‚â°sym C1] ‚áí oft_cong [_ ‚ä¢ C1] d
  | [_ ‚ä¢ ‚â°trans C1 C2] ‚áí oft_cong_symm [_ ‚ä¢ C1] (oft_cong_symm [_ ‚ä¢ C2] d)
  ;