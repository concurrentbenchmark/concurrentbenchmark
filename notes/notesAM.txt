Sept 23

A1 simplifies Vasco's restricting to value passing. It sorts of trivializes the qualifiers (we do not allow un(!T.U))

system: Vasco -> Walker -> Linear LF

	3 ops on ctx: split, update, join --> overkill

-- Why not use Vasco as challenge? Can we also use it for scope extrusion?


---------------
A1

make connection with Vasconcelos IC paper. Explain and motivate
differences: abstract base types, more importantly channels are *not*
values, to isolate scope extrusion to C2 -- however, we do have it
here in the def of congruence
"Note that the scope of a restriction may not change
when processes interact, since it is only possible to send and receive values, and
not names."

Question: do we need Sc-Res-Par?

If we endorse the Barendregt convention, then as in Vasco we do not need proviso in Sc-Res-Par, since no xy can occur free in Q since are bound in P. This also explain why we do not need a similar proviso in the T-Res rule, since x and y are fresh by convention.

-  "all types are linear" and lin(Ga) still weird to me

------
Typos

A.1.1
- The process \( \Pout{x}{a}{P} \) is an \emph{output}, which can send the value \( v \) via \( x \), then continue as \( P \).

should it be  \( \Pout{x}{v}{P} \) [DONE]


- P{v/w} should be P{v/l} and explanation of what is substituted changed accordingly

 [DONE]
A.1.4

- \Presd{x_1}{y_1}{\Presd{x_2}{y_2}{(\Ppar{\Pout{x_1}{a}{\Pin{y_2}{l}{\Pend}}}{\Pout{y}{x_2}{\Pin{y_1}{l}{\Pend}}})}}

y shoud be y_2
 [DONE]

- def of Gamma: we should allow variable names (or values? That seems strange)  there

G := ...
| G, l: T
 
see rule T-var (should be l, rather than v?)
[DONE]

- where do we use the judgment lin(T)?



- Would a dual presentation (with
intutionistic and linear context separeted) be cleaner? I'm working on that, in the sense that I have one but I have to concince myself it's equivalent.

- Give a reference where this calculus come from. [DONE]

- Is the update operation
partial? Seems undefined on base/end.

- Since there are three typing judgments, perhaps we should not call them all as T-*

-  However, then
  it is inconsistent with T-OUT (+ x: T) and similarly T-IN. If x
  occurs lineary in the context of the conclusion it has to go to
  Gamma_1, hence it cannot occur in Gamma_3, so why the update.

- is T-VAR even necessary? It cannot be for v in any case

  

- "our type system will mantain 2 invariants": more then 2, also that values are base

------------
Notes to abstract:

A.1.3 in finite case, barbed-bisim still needs to be defined so as to have
some (co)inductive principle to use in the proof. Perhaps make clear that
it is not simply a fixed point requiring only case analysis.

Thm 1. Would it make any difference (i.e. more interesting) to prove conguence, rather than equivalence here?
 

A.3.2: The qualifier
lin(T) is never used in the rules.

Insisting that context are sets and detailing what a split is: sounds
like a nod towards the implementation. Not that I have a better
suggestion.

% OBSOLETE

A.3.1 Note to myself: "binary" restriction: do we need n-any binary or nu x. nu y. etc will do
[no we do not]
A.2.1 there is a lot of repetitions here wrt A.1.1 and A.3.1
explaining the notation for processes, convention for names etc. If
this is intentional, I find it a bit distracting.

T-RES: should we use +? namely G+ x: T+ x: dual T.  Unless we mean
  that in RES x and y are fresh (hence comma is fine),
